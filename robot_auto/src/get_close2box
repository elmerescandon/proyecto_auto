#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import tf
from sensor_msgs.msg import CameraInfo
from std_msgs.msg import Int32MultiArray,Bool,Float32,Float32MultiArray
from robot_auto.msg import Teabox_detect
from geometry_msgs.msg import PoseStamped
from hector_uav_msgs.msg import PoseActionGoal


box1_pose = [37.378206,19.255097,0.775000]
box2_pose = [40.167635,13.413286,0.774997]
box3_pose = [43.494007,19.552097,0.886790]
box4_pose = [43.538385,22.782863,0.886794]
box5_pose = [40.347300,24.432900,0.909000]
box6_pose = [38.451601,24.458197,0.909000]
box7_pose = [36.000901,24.460597,0.909000]
box8_pose = [28.175306,20.353243,0.890216]
box9_pose = [23.154997,20.362420,0.890217]
box10_pose = [31.868636,16.804810,0.884735]
box11_pose = [31.858388,14.056119,0.884764]
box12_pose = [34.714498,13.379483,0.774997]
boxes = [box1_pose,box2_pose,box3_pose,box4_pose,box5_pose,
		 box6_pose,box7_pose,box8_pose,box9_pose,box10_pose,
		 box11_pose,box12_pose]
# ================================================
# Clase del suscriptor de la pose actual del robot
# ================================================
class Suscriptor_quadrotor_pose():
	def __init__(self):
		topic = '/ground_truth_to_tf/pose'
		self.pose_actual = PoseStamped()
		self.pub = rospy.Subscriber(topic,PoseStamped,self.callback_points)
	def callback_points(self,msg):
		self.pose_actual = msg
		# print(self.pose_actual.pose.position.x)
	def get_pose(self): 
		x_act = self.pose_actual.pose.position.x
		y_act = self.pose_actual.pose.position.y
		z_act = self.pose_actual.pose.position.z
		x_q_act = self.pose_actual.pose.orientation.x
		y_q_act = self.pose_actual.pose.orientation.y
		z_q_act = self.pose_actual.pose.orientation.z
		w_act = self.pose_actual.pose.orientation.w
		return np.array([x_act,y_act,z_act,x_q_act,y_q_act,z_q_act,w_act])


# ==================================
# Clase obtener profundida de distancia
# ==================================
class Depth_distance():
	def __init__(self):
		# self.teabox_detection = Teabox_detect()
		self.d = 0.0
		subpix = rospy.Subscriber('/depth_distance',Float32,self.callback_depth)
	def callback_depth(self,msg):
		self.d = msg.data
	def get_depth(self):
		return self.d


# ==================================
# Clase obtener banderas del objeto 
# ==================================
class Pixel_Follow():
	def __init__(self):
		# self.teabox_detection = Teabox_detect()
		self.box_framed = False
		self.possible_box = False
		subpix = rospy.Subscriber('/pixel_reference',Teabox_detect,self.callback_pixel)
	def callback_pixel(self,msg):
		self.box_framed = msg.box_framed
		self.possible_box = msg.possible_box
	def get_pixel(self):
		return self.box_framed,self.possible_box


# Inicializar nodo y suscripciones
rospy.init_node('get_close2box')

# Publicar al nodo las velocidad de las ruedas
topic_pub = '/action/pose/goal'
pub = rospy.Publisher(topic_pub,PoseActionGoal,queue_size=10)
pose_quadrotor = PoseActionGoal()


# 
topic_pub2 = '/check_space'
pub_2 = rospy.Publisher(topic_pub2,Bool,queue_size=10)
revisar = Bool()

# Definir el objeto sub para obtener la posición actual del robot
sub_pose = Suscriptor_quadrotor_pose()
sub_pixel = Pixel_Follow()
sub_depth = Depth_distance()


# Iniciar despegue del robot

pose_quadrotor.goal.target_pose.header.frame_id = "world"
quadrotor_pos = pose_quadrotor.goal.target_pose.pose.position 
quadrotor_or = pose_quadrotor.goal.target_pose.pose.orientation


rate = rospy.Rate(30)
flag = True

while not rospy.is_shutdown():
	med = sub_pose.get_pose()
	box_framed,box_possible = sub_pixel.get_pixel()
	box_delete = []
	if box_possible and flag:
		for a in boxes: 
			box = np.array(a)
			box_delete = a 
			if 0.4 < np.linalg.norm(box - med[0:3]) < 3:
				# print(np.linalg.norm(box - med[0:3]))
					error_x = box[0] - med[0]
					error_y = box[1] - med[1]
			 		quadrotor_pos.x = med[0] + error_x/20
			 		quadrotor_pos.y = med[1] + error_y/20
					quadrotor_pos.z = box[2] + 0.2
					print(quadrotor_pos.x)
					print(quadrotor_pos.y)
					pub.publish(pose_quadrotor)
			elif np.linalg.norm(box - med[0:3])<= 0.4:
				print("Ya llego al punto")

			else:
				pass
				
			if box_framed:
				boxes.remove(a)
				print(boxes)
				flag = False
				print("Consiguió enmarcarlo")
				revisar.data = True
				pub_2.publish(revisar)



