#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import rospy
import numpy as np
from geometry_msgs.msg import PoseStamped
from hector_uav_msgs.msg import PoseActionGoal
import functions as num
from copy import copy


# ===============================================
# Clase Suscriptor para obtener la pose del robot
# ===============================================

class suscriptor_quadrotor_pose():
	def __init__(self):
		topic = '/keys'
		self.pose_actual = PoseStamped()
		self.pub = rospy.Subscriber(topic,PoseStamped,self.callback_points)
	def callback_points(self,msg):
		self.pose_actual = msg
		# print(self.pose_actual.pose.position.x)
	def get_pose(self): 
		x_act = self.pose_actual.pose.position.x
		y_act = self.pose_actual.pose.position.y
		z_act = self.pose_actual.pose.position.z
		x_q_act = self.pose_actual.pose.orientation.x
		y_q_act = self.pose_actual.pose.orientation.y
		z_q_act = self.pose_actual.pose.orientation.z
		w_act = self.pose_actual.pose.orientation.w
		return np.array([x_act,y_act,z_act,x_q_act,y_q_act,z_q_act,w_act])

# ===============================================
# Clase Suscriptor para las teclas presionadas
# ===============================================
class suscriptor_keys():
	def __init__(self):
		topic = '/keys'
		# self.keyobj = String()
		self.key = "0"
		self.pub = rospy.Subscriber(topic,String,self.callback_key)
	def callback_key(self,msg):
		self.key = msg.data
		# print(self.pose_actual.pose.position.x)
	def get_key(self): 
		return self.key



# Inicializar el nodo
rospy.init_node('quadrotor_teleop_pose')
# rospy.init_node()

# Publicar al nodo las velocidad de las ruedas
topic_pub = '/action/pose/goal'
pub = rospy.Publisher(topic_pub,PoseActionGoal,queue_size=10)
pose_quadrotor = PoseActionGoal()

# Definir el objeto sub
sub = suscriptor_quadrotor_pose()

# Definir el objeto de sub_teclado
sub_key = suscriptor_keys()

# Iniciar despegue del robot
# z_takeoff = 1
# Actualizar posici√≥n cartesiana del robot
theta = 90
R = num.rotaxis(np.deg2rad(theta),'z')#.dot(num.rotaxis(np.deg2rad(30),'x'))
q = num.rot2quat(R)

pose_quadrotor.goal.target_pose.header.frame_id = "world"
quadrotor_pos = pose_quadrotor.goal.target_pose.pose.position 
quadrotor_or = pose_quadrotor.goal.target_pose.pose.orientation



pub.publish(pose_quadrotor)   


# pose_actual = np.array([x_act,y_act,z_act])

rate = rospy.Rate(50)

while not rospy.is_shutdown():
	med = sub.get_pose() 
	key = sub_key.get_key()

	# El sistema Z del robot apunta hacia arriba
	if key == 'j': # Rotar de forma antihoraria (yaw = +0.01)
		theta = theta + 0.1
		R = num.rotaxis(np.deg2rad(theta),'z')#.dot(num.rotaxis(np.deg2rad(30),'x'))
		q = num.rot2quat(R)

	elif key == 'l' # Rotar de froam horaria (yaw = -0.01)
		theta = theta - 0.1
		R = num.rotaxis(np.deg2rad(theta),'z')#.dot(num.rotaxis(np.deg2rad(30),'x'))
		q = num.rot2quat(R)

	elif key == 'k' # Desplazar hacia abajo (z = -0.01)
		z_des = med[2] - 0.01

	elif key == 'i' # Desplazar hacia arriba (z = 0.01) 
		z_des = med[2] + 0.01

	elif key == 'w' # Desplazar hacia adelante

	quadrotor_pos.x = x_des #med[0]
	quadrotor_pos.y = y_des  #med[1]
	quadrotor_pos.z = z_des
	quadrotor_or.x = q[0]
	quadrotor_or.y = q[1] 
	quadrotor_or.z = q[2]
	quadrotor_or.w = q[3]

	pub.publish(pose_quadrotor)

	rate.sleep()