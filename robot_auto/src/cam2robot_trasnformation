#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import tf
from sensor_msgs.msg import CameraInfo
from std_msgs.msg import Float32MultiArray
from std_msgs.msg import Float32
from std_msgs.msg import Int32MultiArray
from robot_auto.msg import Teabox_detect

# ==================================
# Clase Desplazamiento hacia objet
# ==================================
class Pixel_Follow():
	def __init__(self):
		self.pixel_array = [0,0]
		self.p_Iu = np.array([[0],[0],[1]])
		# Tópico para recibir la media del grupo de píxeles del objeto
		topic_sub = '/pixel_reference'
		subpix = rospy.Subscriber(topic_sub,Teabox_detect,self.callback_pixel)
	def callback_pixel(self,msg):
		self.pixel_array = msg.pixel
	def get_pixel(self):
		self.p_Iu = np.array([[self.pixel_array[0]],[self.pixel_array[1]],[1]])
		return self.p_Iu


# ==================================
# Clase Parámetros de la Cámara
# ==================================
class Cam_params():
    def __init__(self):
        self.camera_params = CameraInfo()
        self.K = np.array([[554.254691191187,0,320.5],
        				   [0.0,554.254691191187,240.5],
        				   [0.0,0.0,1.0]])
        topic_name = "/camera/rgb/camera_info"
        isub = rospy.Subscriber(topic_name, CameraInfo, self.cam_params_callback)

    def cam_params_callback(self, msg):
        k_array = msg.K
    	self.K = np.array([[k_array[0],k_array[1],k_array[2]],
					       [k_array[3],k_array[4],k_array[5]],
					       [k_array[6],k_array[7],k_array[8]]])
    def get_params(self):
        return self.K


# ==================================
# Clase obtener profundida de distancia
# ==================================
class Depth_distance():
	def __init__(self):
		# self.teabox_detection = Teabox_detect()
		self.d = 0.0
		subpix = rospy.Subscriber('/depth_distance',Float32,self.callback_depth)
	def callback_depth(self,msg):
		self.d = msg.data
	def get_depth(self):
		return self.d

# ==================================
# Función de trasnformación Q to R
# ==================================

def rotFromQuat(q):
    """ q = [ex, ey, ez, ew]
    """
    return np.array([[2.*(q[3]**2+q[0]**2)-1., 2.*(q[0]*q[1]-q[3]*q[2]), 2.*(q[0]*q[2]+q[3]*q[1])],
                     [2.*(q[0]*q[1]+q[3]*q[2]), 2.*(q[3]**2+q[1]**2)-1., 2.*(q[1]*q[2]-q[3]*q[0])],
                     [2.*(q[0]*q[2]-q[3]*q[1]), 2.*(q[1]*q[2]+q[3]*q[0]), 2.*(q[3]**2+q[2]**2)-1.]])

# ==================================
# Inicio de programa
# ==================================

rospy.init_node('camera_transformation')
tflistener = tf.TransformListener()
R_WC = np.eye(3)
p = np.array([0,0,0])


# Objeto para suscribirse al píxel de posición
pixel_follow = Pixel_Follow()

# Objeto para obtener profundida hacia el objeto
depth_d = Depth_distance()

# Tópico para publicar la posición a desplazar
topic_pub = '/pose_object_follow'
pub_campose = rospy.Publisher(topic_pub,Float32MultiArray,queue_size=10)
pose_object_follow = Float32MultiArray()


# Código para identificar a qué eje se desplazará
array_pose_follow = [0,0,0] # Pose del robot a desplazarse


pose_object_follow.data = array_pose_follow


# Objecto de parámetros de la cámara
cam_params = Cam_params()
l = 1 # Factor 
direction = np.array([[0],[0],[0]])
T_BF = np.eye(4)
p_test = np.array([[0],[0],[0]])
d = 0.0

T_WC = np.eye(4)
T_BC = np.eye(4)
T_WB = np.eye(4)

rate = rospy.Rate(30)
while not rospy.is_shutdown():

	p_Iu = pixel_follow.get_pixel()
	if (p_Iu[0] != 0 and p_Iu[1] != 0):
		d = depth_d.get_depth()
		# p_Iu[2][0] = d
		# Obtener la matriz de rotación del sistema de la cámara al mundo 
		try: 
			(trans,rot) = tflistener.lookupTransform('world','camera_rgb_optical_frame',rospy.Time(0))
			R_WC2 = rotFromQuat(rot)
			T_WC[0:3,0:3] = R_WC2
			T_WC[0:3,3] = trans 

			(trans2,rot2) = tflistener.lookupTransform('base_link','camera_rgb_optical_frame',rospy.Time(0))
			R_BC = rotFromQuat(rot2)
			T_BC[0:3,0:3] = R_BC
			T_BC[0:3,3] = trans2
			
			p_rgb2frame = np.array([[-trans2[1]],[trans2[0]],[trans2[2]]])
			p_base = p - p_rgb2frame
			
			(trans3,rot3) = tflistener.lookupTransform('world','base_link',rospy.Time(0))
			R_WB = rotFromQuat(rot3)
			T_WB[0:3,0:3] = R_WB
			T_WB[0:3,3] = trans3



		except (tf.Exception, tf.LookupException, tf.ConnectivityException):
			pass

		# Proyecto el punto de la cámara con respecto al sistema del mundo
		K = cam_params.get_params()
		direction = l*np.linalg.inv(K.dot(R_BC.T)).dot(p_Iu)
		direction_des = R_WB.dot(direction)


		direction[1][0] = 0

		direction_ = np.array([[direction[0][0]],[direction[1][0]],[direction[2][0]]])
		p_des = direction_des + np.array([[trans3[0]],[trans3[1]],[trans3[2]]])
		print(p_des)
		array_pose_follow = [p_des[0][0],p_des[1][0],p_des[2][0]]
		pose_object_follow.data = array_pose_follow
		# print(array_pose_follow)
		pub_campose.publish(pose_object_follow)


	rate.sleep()